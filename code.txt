import './style.css'
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { VertexNormalsHelper } from 'three/addons/helpers/VertexNormalsHelper.js';
import { DragControls } from 'three/examples/jsm/controls/DragControls.js';

let scene, camera, renderer, cubeGeo, cubeMaterial, cube, planeGeo, planeMaterial, plane;
const webglCanvas = document.querySelector('.webgl');

// ------------------------- SET UP ------------------------//
scene = new THREE.Scene();

// Camera
camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1, 500
);
camera.position.y = 1;
camera.position.z = 5;

// Renderer
renderer = new THREE.WebGLRenderer(
  { antialias: true,
    canvas: webglCanvas }
);
renderer.setSize(window.innerWidth, window.innerHeight);

// const controls = new OrbitControls(camera, renderer.domElement);
// controls.update();

const axesHelper = new THREE.AxesHelper(10);
// scene.add(axesHelper);

// Plane
planeGeo = new THREE.PlaneGeometry(5, 5);
planeMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
plane = new THREE.Mesh(planeGeo, planeMaterial);
// plane.rotation.x = -Math.PI / 2;
scene.add(plane);

// Move cube to plane's normal vertex - first vertex
const vertexIndex = 0;
const vertexPosition = new THREE.Vector3();

// Extract the position of the choosen vertex
vertexPosition.fromBufferAttribute(plane.geometry.attributes.position, vertexIndex);

// Extract the normal choosen vertex
const normal = new THREE.Vector3();
normal.fromBufferAttribute(plane.geometry.attributes.normal, vertexIndex);

const cubePosition = vertexPosition.clone().add(normal.clone().multiplyScalar(0.25));
console.log(cubePosition)

// Cube
cubeGeo = new THREE.BoxGeometry(1.5, 1.5, 1.5);
cubeMaterial = new THREE.MeshBasicMaterial({ color: 0x00faff });
cube = new THREE.Mesh(cubeGeo, cubeMaterial);
// cube.position.y = 0.75;
cube.position.copy(cubePosition);

scene.add(cube);

// Set initial state variables for draggging
let isDragging = false;
let initialMousePosition = new THREE.Vector2();
let initalCubePosition = new THREE.Vector3();

// Event listeners for mouse actions
window.addEventListener('mousedown', (event) =>{
    // Check if the cube is clicked
    const mouse = new THREE.Vector2(
        (event.clientX / window.innerWidth) * 2 - 1,
        -(event.clientY / window.innerHeight) * 2 + 1
    );

    console.log(mouse)

    const raycaster = new THREE.Raycaster();
    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObject(cube);

    if(intersects.length > 0){
        // Start dragging
        isDragging = true;
        initialMousePosition.set(event.clientX, event.clientY);
        initalCubePosition.copy(cube.position);
    }
});

window.addEventListener('mousemove', (event) => {
    if(isDragging){
        // Calculate mouse movement delta
        const deltaMouse = new THREE.Vector2(
            event.clientX - initialMousePosition.x,
            event.clientY - initialMousePosition.y
        );

        // console.log(deltaMouse)
        // Project mouse movement onto normal to get movement along normal direction
        const dragDistance = deltaMouse.y * 0.01;
        const newCubePosition = initalCubePosition.clone().add(normal.clone().multiplyScalar(dragDistance));
        
        // Update cube position
        cube.position.copy(newCubePosition);
    }
});

window.addEventListener('mouseup', () => {
    // Stop dragging
    isDragging = false;
})


// Show normals for plane's vertexs
const normalsPlane = new VertexNormalsHelper(plane, 1, 0xff0000);
scene.add(normalsPlane);

// Show normals for cube's vertexs
const normalsCube = new VertexNormalsHelper(cube, 1, 0xff0000);
scene.add(normalsCube);


// Window resize event listener
window.addEventListener('resize', () => {
  // Update renderer size
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  // Update camera aspect and re-calculate projection matrix
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
});


function animate(){
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}

animate();
// ----------------------------- SET UP ENDED ----------------------------------//
